//FRAGMENT SHADER
#ifdef GL_ES
precision highp float;
#endif
#define RE_START -2.
#define RE_END    1.
#define IM_START -1.
#define IM_END    1.
#define MAX_ITER 359

//fragCoord is current pixel
//main loops the entire program every pixel

//vec2 simpleComplex(vec2 xy) {
//    vec2 result;
//    result.x = (RE_START + (xy.x/iResolution.x) * float(RE_END - RE_START));
//	result.y = (IM_START + (xy.y/iResolution.y) * float(IM_END - IM_START));
//	return result;        
//}

//GLSL doesn't support while loops on old versions for some reason... ¯\_(ツ)_/¯
float fMbrot(vec2 c) {   
    int n = 0;
    float i = 0.;
    vec2 z;
    for(i=0.;i<float(MAX_ITER);i++){
        z = vec2(z.x*z.x - z.y*z.y, 2.*z.x*z.y) + c;
    	if(length(z)>2.) break;
    }
    return i;
}
float smoothColoring(float i) {
	//float nSmooth = log( 1.)/10.;
    float nSmooth = i + 1. - log( log( abs(float(MAX_ITER)) ) )/log(2.);
    return nSmooth;                                
}

float trueCmap(float n) { 
    float balance[5] = {1000.0, 2.0, 3.4, 7.0, 50.0};
    //vec3 cMap[2]= {vec3(1.,0.,0.),vec3(1.,0.,1.)};
//    float quotient = float(sizeof(cMap)) * n / float(MAX_ITER);
//    float lowerIndex = floor(quotient);
//    float upperIndex = ceil(quotient);
//    float fraction = quotient - lower;
//    vec3 c = cMap[lowerIndex] + fraction * (cMap[upperIndex] - cMap[lowerIndex]);
    
return 0.;
}

vec4 nmap(float n) {
	vec3 colmap;
    if (float(n) <= float(MAX_ITER)) {
        float quotient = float(n) / float(MAX_ITER);
        float color = clamp(quotient,0.,1.);
        	if (quotient > 0.5) {
        	// Close to the mandelbrot set the color changes from green to black 
 				colmap = vec3(0.); //(color,1.,color);
        	}
        	else {
                colmap = vec3(0.,color,0.);
            }
    }
    return vec4(colmap,1.);
}

int wMbrot(vec2 c) { 
    vec2 zed;
    zed.x = 0.0;
    zed.y = 0.0;    
    int n = 0;
    //https://www.varsitytutors.com/hotmath/hotmath_help/topics/absolute-value-complex-number
    while (sqrt(pow(zed.x,2.0) + pow(zed.y,2.0)) <= 2.0 && n < MAX_ITER) { 
        //zed = zed*zed + c;
        zed = vec2 (pow(zed.x,2.0)-pow(zed.y,2.0),2.0 *zed.x * zed.y);
    	zed.x = (zed.x + c.x);
    	zed.y = (zed.y + c.y);    
		//http://mathworld.wolfram.com/ComplexAddition.html        
		n+=1;
    }
    return n;
}



void mainImage( out vec4 fragColor, in vec2 fragCoord ) {
    vec2 uv = fragCoord.xy/iResolution.xy;
	float aspect = iResolution.y/iResolution.x;
	vec2 p = uv*2.-1.; // transform uv range(0-1) to be centered and normalized(-1-1)
	p.y*=aspect;
    float n = fMbrot(p*2.); // *2. is the zoom value to create a variable for controlled by GUI    
    float fn = smoothColoring(n);
    vec4 preColor = trueCmap(fn);
    fragColor = preColor;        
}
